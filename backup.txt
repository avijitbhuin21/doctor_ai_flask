<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ECG Report Analyzer</title>
    <style>
        :root {
            --primary-bg: #0a0a0a;
            --text-primary: #ffffff;
            --text-secondary: rgba(255, 255, 255, 0.7);
            --border-radius: 16px;
            --accent-color: #4ECDC4;
            --gradient-1: #FF6B6B;
            --gradient-2: #4ECDC4;
            --gradient-3: #45B7D1;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        *::-webkit-scrollbar {
            display: none;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: var(--primary-bg);
            color: var(--text-primary);
            min-height: 100vh;
            padding: 2rem;
            overflow-x: hidden;
        }

        .gradient-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background:
                radial-gradient(circle at top right, rgba(78, 205, 196, 0.2), transparent 50%),
                radial-gradient(circle at bottom left, rgba(255, 107, 107, 0.2), transparent 50%),
                radial-gradient(circle at center, rgba(69, 183, 209, 0.1), transparent 50%);
            z-index: -1;
            animation: gradientMove 15s ease infinite;
        }

        @keyframes gradientMove {
            0% { background-position: 0% 0%; }
            50% { background-position: 100% 100%; }
            100% { background-position: 0% 0%; }
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .title {
            font-size: 3rem;
            font-weight: 800;
            background: linear-gradient(135deg, #fff 0%, #ffffffaa 100%);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 1rem;
            text-align: center;
            text-shadow: 0 0 30px rgba(255, 255, 255, 0.1);
        }

        .upload-section {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: var(--border-radius);
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .drop-zone {
            width: 100%;
            min-height: 250px;
            padding: 2rem;
            text-align: center;
            background: rgba(255, 255, 255, 0.03);
            border: 2px dashed rgba(255, 255, 255, 0.2);
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 1rem;
        }

        .drop-zone:hover, .drop-zone.dragover {
            background: rgba(255, 255, 255, 0.05);
            border-color: var(--accent-color);
            transform: scale(1.01);
        }

        .drop-zone-text {
            font-size: 1.4rem;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
        }

        .browse-files {
            color: var(--accent-color);
            text-decoration: underline;
            cursor: pointer;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .browse-files:hover {
            color: var(--gradient-1);
        }

        #file-input {
            display: none;
        }

        .preview-section {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: var(--border-radius);
            padding: 2rem;
        }

        .preview-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1.5rem;
        }

        .file-preview {
            position: relative;
            background: rgba(255, 255, 255, 0.05);
            border-radius: var(--border-radius);
            padding: 1rem;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .file-preview:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .file-preview img {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: calc(var(--border-radius) - 8px);
            margin-bottom: 0.5rem;
        }

        .file-preview .file-icon {
            width: 100%;
            height: 150px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
            background: linear-gradient(135deg, rgba(78, 205, 196, 0.2), rgba(69, 183, 209, 0.2));
            border-radius: calc(var(--border-radius) - 8px);
            margin-bottom: 0.5rem;
            color: var(--accent-color);
        }

        .file-name {
            font-size: 0.9rem;
            color: var(--text-secondary);
            word-break: break-all;
            margin-top: 0.5rem;
        }

        .remove-file {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background: rgba(255, 107, 107, 0.8);
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .remove-file:hover {
            background: rgba(255, 107, 107, 1);
            transform: scale(1.1);
        }

        .get-report-btn {
            background: linear-gradient(135deg, var(--gradient-1), var(--gradient-2));
            color: white;
            border: none;
            border-radius: var(--border-radius);
            padding: 1rem 2rem;
            font-size: 1.2rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 2rem;
            width: 100%;
            max-width: 300px;
            margin: 2rem auto;
            position: relative;
            overflow: hidden;
        }

        .get-report-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                120deg,
                transparent,
                rgba(255, 255, 255, 0.2),
                transparent
            );
            transition: 0.5s;
        }

        .get-report-btn:hover::before {
            left: 100%;
        }

        .get-report-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        @media (max-width: 768px) {
            .title {
                font-size: 2rem;
            }

            .drop-zone {
                min-height: 200px;
            }
        }

        #rules{
            display: block;
            width: 60vw;
        }
    </style>
</head>
<body>
    <div class="gradient-bg"></div>
    <div class="container">
        <h1 class="title">ECG Report Analyzer</h1>

        <div class="upload-section">
            <div class="drop-zone" id="drop-zone">
                <p class="drop-zone-text">Drag and drop files here</p>
                <p class="drop-zone-text">Supported files: PDF, DOCX, PNG, JPEG, JPG</p>
                <p>or</p>
                <p class="browse-files">Browse Files</p>
            </div>
            <input type="file" id="file-input" multiple accept="image/*,.pdf,.doc,.docx">
        </div>

        <div class="preview-section" id="preview-section">
            <div class="preview-container" id="preview-container">
                <div id="rules">
                    <p><strong>Rules You Should Follow when using this app:</strong></p>
                    <p>     - If you have multiple images of a single ecg report, arrange them in order.</p>
                    <p>     - Do not use any other document that is not supported.</p>
                </div>
            </div>
        </div>

        <button class="get-report-btn" id="get-report-btn">Generate Report</button>
    </div>

    <script>
        const dropZone = document.getElementById('drop-zone');
        const fileInput = document.getElementById('file-input');
        const previewContainer = document.getElementById('preview-container');
        const getReportBtn = document.getElementById('get-report-btn');
        const selectedFiles = new Set();

        dropZone.addEventListener('click', () => fileInput.click());

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });

        function highlight(e) {
            dropZone.classList.add('dragover');
        }

        function unhighlight(e) {
            dropZone.classList.remove('dragover');
        }

        dropZone.addEventListener('drop', handleDrop, false);
        fileInput.addEventListener('change', handleFiles, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles({ target: { files } });
        }

        function handleFiles(e) {
            const files = [...e.target.files];
            files.forEach(file => {
                if (!selectedFiles.has(file.name)) {
                    selectedFiles.add(file.name);
                    displayFilePreview(file);
                }
            });
            updateReportButtonState();
        }

        function displayFilePreview(file) {
            const preview = document.createElement('div');
            preview.className = 'file-preview';

            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-file';
            removeBtn.innerHTML = '×';
            removeBtn.onclick = () => {
                preview.remove();
                selectedFiles.delete(file.name);
                updateReportButtonState();
            };

            if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                const reader = new FileReader();

                reader.onload = e => img.src = e.target.result;
                reader.readAsDataURL(file);
                preview.appendChild(img);
            } else {
                const fileIcon = document.createElement('div');
                fileIcon.className = 'file-icon';
                fileIcon.textContent = getFileExtension(file.name).toUpperCase();
                preview.appendChild(fileIcon);
            }

            const fileName = document.createElement('div');
            fileName.className = 'file-name';
            fileName.textContent = file.name;

            preview.appendChild(removeBtn);
            preview.appendChild(fileName);
            previewContainer.appendChild(preview);
            toggleRulesDisplay();
        }

        function getFileExtension(filename) {
            return filename.slice((filename.lastIndexOf(".") - 1 >>> 0) + 2);
        }

        function updateReportButtonState() {
            getReportBtn.disabled = selectedFiles.size === 0;
            getReportBtn.style.opacity = selectedFiles.size === 0 ? '0.5' : '1';
            toggleRulesDisplay();
        }

        function toggleRulesDisplay() {
            const rules = document.getElementById('rules');
            if (selectedFiles.size === 0) {
                rules.style.display = 'block';
            } else {
                rules.style.display = 'none';
            }
        }

        getReportBtn.addEventListener('click', () => {
            if (selectedFiles.size > 0) {
                console.log('Generating report for files:', Array.from(selectedFiles));
            }
        });

        updateReportButtonState();
    </script>
</body>
</html>









from flask import Flask, render_template, request, jsonify
from utils import Patient_chat_Helper, File, Doctor_chat_Helper, ECG
import json
from flask import request

patient_agent = Patient_chat_Helper()
doctor_agent = Doctor_chat_Helper()
file_handler = File()
ecg_agent = ECG()
app = Flask(__name__)

DEBUG = True

def log_debug(data):
    if DEBUG:
        print(f"DEBUG: {data}")


@app.route("/")
def index():
    return render_template("homepage.html")

@app.route("/redirect_patient")
def redirect_patient():
    return render_template("redirect_patient.html")

@app.route("/redirect_doctor")
def redirect_doctor():
    return render_template("redirect_doctor.html")

@app.route("/get_ecg")
def get_ecg():
    return render_template("ecg_report.html")

@app.route("/get_ai_response", methods=["POST"])
def get_ai_response():
    data = request.json
    user_message = data["message"]
    chat_history = data["history"]
    patient_info = data["patientInfo"]

    log_debug(user_message)
    log_debug(chat_history)
    log_debug(patient_info)
    
    ai_response = patient_agent.get_a_question(patient_data= patient_info, conversation= chat_history)

    return jsonify({"response": ai_response})

@app.route("/get_greetings", methods=["POST"])
def get_greetings():
    data = request.json
    patient_info = data["patientInfo"]

    log_debug(patient_info)

    greetings = patient_agent.greet(patient_data = patient_info)
    log_debug(greetings)

    return jsonify({"response": greetings})

@app.route("/upload", methods=["POST"])
def upload():
    # Extract patient details from the form
    patient_details = {
        "fullName": request.form.get("fullName"),
        "age": request.form.get("age"),
        "gender": request.form.get("gender"),
        "height": request.form.get("height"),
        "weight": request.form.get("weight"),
        "bloodGroup": request.form.get("bloodGroup"),
        "symptoms": request.form.get("symptoms"),
        "medicalHistory": request.form.get("medicalHistory"),
        "medications": request.form.get("medications"),
        "extraDetails": request.form.get("extraDetails")
    }
    report = None
    # log_debug patient details in JSON format
    log_debug("Patient Details (JSON):")
    log_debug(json.dumps(patient_details, indent=4))

    # Process uploaded files
    if "files" in request.files:
        files = request.files.getlist("files")
        file_data = []
        for file in files:
            file_data.append({"filename": file.filename, "content": file.read()})
            file.seek(0)  # Reset file pointer after reading

        report = file_handler.handle_file(file_data= file_data)
        log_debug(report)

    questions = doctor_agent.get_questions(patient_data= patient_details, reports= report)
    log_debug(questions)
    return jsonify({"questions": questions, "report": report})


@app.route('/generate_report', methods=['POST'])
def generate_report():
    patient_info = request.json.get('patientInfo')
    report = request.json.get('report')
    follow_up_questions = request.json.get('followUpQuestions')

    log_debug(f"Patient Info: {patient_info}")
    log_debug(f"Report: {report}")
    log_debug(f"Follow-up Questions: {follow_up_questions}")

    differential_diagonosis = doctor_agent.generate_report(patient_data= patient_info, report= report, follow_up_questions= follow_up_questions)
    log_debug(differential_diagonosis)

    return jsonify({"report": differential_diagonosis})

@app.route('/get_ecg_report', methods=['POST'])
def get_ecg_report():
    files = request.files.getlist("files")
    file_data = []
    for file in files:
        print(file.filename)
        file_data.append({"filename": file.filename, "content": file.read()})
        file.seek(0)  # Reset file pointer after reading

    report = ecg_agent.handle_file(file_data= file_data)
    log_debug(report)
    return jsonify({"report": report})


if __name__ == "__main__":
    app.run(debug=True, port=5000)

